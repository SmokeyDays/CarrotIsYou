#include "CarrotOS.h"
#include "./lib/MiniMalloc.h"

const unsigned int pixel[] = 
{2236928, 48373760, 788406784, 2399135778, 3793104608, 576859886, 4062376448, 572662304, 331776, 1380608, 22368528, 1431655697, 2857719125, 178607440, 11162880, 675840, 0, 557056, 9209856, 13421696, 214748352, 3418148044, 3149647035, 3149642683, 3355392, 53686832, 36844339, 857944867, 589509155, 573776674, 572662306, 35791392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 257, 256, 1118481, 1048832, 1052688, 1048592, 1114113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250486302, 17899038, 31580433, 249687582, 236002846, 31580446, 249634334, 0, 85283089, 85266769, 17895697, 85283153, 17912081, 85283153, 17912145, 0, 51581715, 17896209, 51581203, 17896211, 51581713, 51581715, 17896209, 0, 214703308, 214703308, 202447900, 214703132, 214703132, 214703132, 17895697, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57344, 250535936, 57344, 250539758, 57344, 14737408, 234938368, 0, 20480, 89478485, 84235525, 20480, 349440, 5263360, 89478485, 0, 49152, 49152, 201375756, 201375756, 201375756, 201375756, 214748364, 0, 53687091, 12288, 768, 53687088, 50332419, 50332416, 53687040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
;

void CarrotOS::renderBigger(int x, int y, int type, int times) {
  for(int i = 0; i < 8; ++i) {
    unsigned int val = pixel[type * 8 + i];
    for(int j = 0; j < times; ++j) {
      for(int k = 0; k < times; ++k) {
        #ifdef CARROT_ON_SDL
          setDisplayMemory(x * 8 * times + j * 8 + i, y * 8 * times + k, val);
        #endif
      }
    }
  }
}

void CarrotOS::render() {
  for(int i = 0; i < 16; ++i) {
    for(int j = 0; j < 16; ++j) {
      int type = core.display[i][j];
      int mask = core.mask[i][j];
      if(type != EMPTY) {
        for(int k = 0; k < 8; ++k) {
          unsigned int val = pixel[type * 8 + k];
          #ifdef CARROT_ON_SDL
            setDisplayMemory(i * 8 + k, j, val);
          #endif
        }
      } else {
        #ifdef CARROT_ON_SDL
        for(int k = 0; k < 8; ++k) {
          setDisplayMemory(i * 8 + k, j, 0);
        }
        #endif
      }
    }
  }
  if(core.isWinning()) {
    renderBigger(4, 4, WIN, 2);
    renderBigger(4, 6, IS, 2);
    renderBigger(4, 8, YOU, 2);
  }
#ifdef CARROT_ON_SDL
  sdlUpdate();
#endif
}

void CarrotOS::run() {
  core.init(level);
  render();
  while(true) {
    switch(state) {
      case OS_INIT:
        
        break;
      case OS_GAME_START:

        break;
      case OS_GAME_RUNNING:
        if (!keyEmpty()) {
          int keyInput = keyPop();
          switch (keyInput) {
            case KEY_UP:
              core.move(0);
              break;
            case KEY_RIGHT:
              core.move(1);
              break;
            case KEY_DOWN:
              core.move(2);
              break;
            case KEY_LEFT:
              core.move(3);
              break;
            case KEY_KEEP:
              core.move(-1);
              break;
            case KEY_UNDO:
              core.undo();
              break;
            case KEY_RESTART:
              core.init(level);
              break;
            case KEY_BACK:
              if (level > 1) {
                level--;
              }
              core.init(level);
              break;
            case KEY_NEXT: 
              if (level < LEVEL_MAX) {
                level++;
              }
              core.init(level);
              break;
          }
          render();
        }
        break;
    }
  }
}